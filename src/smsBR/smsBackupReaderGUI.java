/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * smsBackupReaderGUI.java
 *
 * Created on Jul 30, 2011, 11:48:28 AM
 */
package smsBR;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.util.*;
import java.io.*;
import java.math.BigInteger;
import javax.swing.JOptionPane;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/**
 *
 * @author xtnetworks
 */
public class smsBackupReaderGUI extends javax.swing.JFrame {

    File openFile;
    
    private static message getText(Element empEl)
	{
		String addressString = empEl.getAttribute("address");
		addressString = removeExtraDigits(addressString);
			
		BigInteger address = new BigInteger(addressString);
		//System.out.println(address.toString());
		
		BigInteger date = new BigInteger(empEl.getAttribute("date"));
		String body = empEl.getAttribute("body");
		int type = Integer.parseInt(empEl.getAttribute("type"));

		//Create a new Employee with the value read from the xml nodes
		message e = new message(address,date,body,type);
		
		return e;
	}

	private static String removeExtraDigits(String inputAddress)
	{
		inputAddress = inputAddress.replaceAll("\\D", "");
		if (inputAddress.charAt(0) == '1')
			inputAddress = inputAddress.substring(1);
		return inputAddress;
	}
    
    private static class message
	{
		private String messageText;
		private int messageType;
		private BigInteger messageDate;
		private BigInteger messageAddress;
                private Date messageDateFormat;
		
		public message()
		{
			messageType = -1;
			messageDate = BigInteger.valueOf(-1);
			messageText = "";
			messageAddress = BigInteger.valueOf(-1);
                        messageDateFormat = new Date();
		}
		
		public message(BigInteger address,BigInteger date,String body,int type)
		{
			messageType = type;
			messageDate = date;
			messageText = body;
			messageAddress = address;
                        messageDateFormat = new Date(messageDate.longValue());
		}
		
		
		public void setMessageText(String input)
		{
			messageText = input;
		}
		
		public String getMessageText()
		{
			return messageText;
		}
		
		public void setMessageType(int input)
		{
			messageType = input;
		}
		
		public int getMessageType()
		{
			return messageType;
		}
		
		public void setMessageDate(BigInteger input)
		{
			messageDate = input;
                        messageDateFormat = new Date(messageDate.longValue());
		}
		
		public BigInteger getMessageDate()
		{
			return messageDate;
		}
		
		public void setMessageAddress(BigInteger input)
		{
			messageAddress = input;
		}
		
		public BigInteger getMessageAddress()
		{
			return messageAddress;
		}
		
		public String toString()
		{
			String tempString;
			if (messageType == 2)
				tempString = "Sent: ";
			else
				tempString = "Received: ";
                        tempString += messageDateFormat.toString() + ":  ";
			tempString += messageText;
			return tempString;
		}
		
	}
	
	private static class contact
	{
		private String name;
		private BigInteger phoneNumber;
		ArrayList<message> messageList;
		
		public contact()
		{
			name = "";
			phoneNumber = new BigInteger("");
			messageList = new ArrayList<message>();
		}
		
		public contact(String inputName, BigInteger inputNumber)
		{
			name = inputName;
			phoneNumber = inputNumber;
			messageList = new ArrayList<message>();
		}
		
		public String getName()
		{
			return name;
		}
		
		public BigInteger getNumber()
		{
			return phoneNumber;
		}
		
		public ArrayList<message> getMessages()
		{
			return messageList;
		}
		
		public void addMessage(message msgToAdd)
		{
			messageList.add(msgToAdd);
		}
		
		public String toString()
		{
			String tempString;
			tempString = name;
			tempString += " - " + phoneNumber.toString();
			return tempString;
		}
		
	}
    
    
    
    
    
    
    
    
    
    
    /** Creates new form smsBackupReaderGUI */
    public smsBackupReaderGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        fileLocationField = new javax.swing.JTextField();
        chooseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contactListBox = new javax.swing.JList();
        loadButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageTextBox = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        numberTextBox = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exitMenuButton = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        helpMenuButton = new javax.swing.JMenuItem();
        aboutMenuButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SMS Backup Reader v0.1");

        fileLocationField.setEditable(false);
        fileLocationField.setText("...");
        fileLocationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileLocationFieldActionPerformed(evt);
            }
        });

        chooseButton.setText("Choose File");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Start by choosing an XML backup file to load:");

        contactListBox.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Contacts load here..." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        contactListBox.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        contactListBox.setEnabled(false);
        contactListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                contactListBoxValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(contactListBox);

        loadButton.setText("Load!");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        messageTextBox.setColumns(20);
        messageTextBox.setEditable(false);
        messageTextBox.setFont(new java.awt.Font("Arial", 0, 12));
        messageTextBox.setLineWrap(true);
        messageTextBox.setRows(5);
        messageTextBox.setText("This is where the messages will show up.");
        jScrollPane2.setViewportView(messageTextBox);

        jLabel2.setText("Number of SMS:");

        numberTextBox.setEditable(false);

        jMenu1.setText("File");

        exitMenuButton.setText("Exit");
        jMenu1.add(exitMenuButton);

        menuBar.add(jMenu1);

        jMenu2.setText("Help");

        helpMenuButton.setText("Help");
        jMenu2.add(helpMenuButton);

        aboutMenuButton.setText("About...");
        aboutMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuButtonActionPerformed(evt);
            }
        });
        jMenu2.add(aboutMenuButton);

        menuBar.add(jMenu2);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fileLocationField, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(numberTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseButton)
                    .addComponent(fileLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(jLabel2)
                    .addComponent(numberTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        // TODO add your handling code here:
        String tempLocation;
        int returnValue = fileChooser.showOpenDialog(smsBackupReaderGUI.this);
        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
        openFile = fileChooser.getSelectedFile();
        tempLocation = openFile.getAbsolutePath();
        fileLocationField.setText(tempLocation);
        }
    }//GEN-LAST:event_chooseButtonActionPerformed

    private void fileLocationFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileLocationFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileLocationFieldActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        try {
            // TODO add your handling code here:
                
                contactListBox.setEnabled(true);
                contactListBox.removeAll();
                messageTextBox.removeAll();
                
                Hashtable contactTable = new Hashtable(250);

                File fXmlFile = openFile;
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(fXmlFile);
                doc.getDocumentElement().normalize();

                Element docEle = doc.getDocumentElement();

                //get a nodelist of elements
                NodeList nl = docEle.getElementsByTagName("sms");
                if(nl != null && nl.getLength() > 0) {
                        numberTextBox.setText("" + nl.getLength());
                        for(int i = 0 ; i < nl.getLength();i++) {

                                //get the message element
                                Element el = (Element)nl.item(i);

                                //get the message object
                                message e = getText(el);


                                //Testing adding messages and contacts to hashtable :)


                                if (contactTable.containsKey(e.getMessageAddress()))
                                {
                                        ((contact)contactTable.get(e.getMessageAddress())).addMessage(e);
                                }
                                else
                                {
                                        contact tempContact = new contact(el.getAttribute("contact_name"), e.getMessageAddress());
                                        tempContact.addMessage(e);
                                        contactTable.put(e.getMessageAddress(), tempContact);
                                }





                                // End testing section
                        }
                }
                Collection tempColl = contactTable.values();
                contact[] contactArray = (contact[])tempColl.toArray(new contact[contactTable.size()]);
                contactListBox.setListData(contactArray);
                
        } catch (SAXException ex) {
            Logger.getLogger(smsBackupReaderGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(smsBackupReaderGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(smsBackupReaderGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_loadButtonActionPerformed

    private void contactListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_contactListBoxValueChanged
        // TODO add your handling code here:
        contact selectedContact = (contact)contactListBox.getSelectedValue();
        ArrayList<message> selectedMessages = selectedContact.getMessages();
        messageTextBox.setText("");
        for (int i = 0;i < selectedMessages.size();i++)
            messageTextBox.append(selectedMessages.get(i).toString() + "\n");
        
    }//GEN-LAST:event_contactListBoxValueChanged

    private void aboutMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuButtonActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "SMS Backup Reader\nv0.1 - 2011-07-30\nBy xtnetworks");
    }//GEN-LAST:event_aboutMenuButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new smsBackupReaderGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuButton;
    private javax.swing.JButton chooseButton;
    private javax.swing.JList contactListBox;
    private javax.swing.JMenu exitMenuButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JTextField fileLocationField;
    private javax.swing.JMenuItem helpMenuButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea messageTextBox;
    private javax.swing.JTextField numberTextBox;
    // End of variables declaration//GEN-END:variables
}
